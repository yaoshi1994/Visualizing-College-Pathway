'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = watcher;

var _chokidar = require('chokidar');

var _chokidar2 = _interopRequireDefault(_chokidar);

var _eslint = require('eslint');

var _eslint2 = _interopRequireDefault(_eslint);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _settings = require('./settings');

var _settings2 = _interopRequireDefault(_settings);

var _simpleDetail = require('./formatters/simple-detail');

var _simpleDetail2 = _interopRequireDefault(_simpleDetail);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = (0, _logger2.default)('watcher');

logger.debug('Loaded');

var events = { change: 'change' };
var chokidarOptions = {
  ignored: /\.git|node_modules|bower_components/
};
var cliOptionProperties = ['config', 'eslintrc', 'ext', 'parser', 'cache', 'cacheLocation', 'ignore', 'ignorePath', 'ignorePattern', 'fix', 'parserOptions', 'global'];
var cliOptionMap = {
  config: 'configFile',
  eslintrc: 'useEslintrc',
  ext: 'extensions',
  cacheFile: 'cacheLocation'
};

function filterWarnings(results) {
  return _lodash2.default.reduce(results, function (curr, result) {
    if (result.warningCount) {
      var newResult = _lodash2.default.omit(result, 'messages');
      newResult.messages = _lodash2.default.find(result.messages, function (m) {
        return m.severity > 1;
      });
      curr.push(newResult);
      return curr;
    }
    curr.push(result);
    return curr;
  }, []);
}

///https://github.com/eslint/eslint/blob/233440e524aa41545b66b2c3c7ca26fe790e32e0/tests/lib/cli-engine.js#L105-L107

function watcher(options) {
  var cliOptions = (0, _lodash2.default)(options).pick(cliOptionProperties).reduce(function (result, value, key) {
    key = cliOptionMap[key] || key;
    result[key] = value;
    return result;
  }, {});
  logger.debug(cliOptions);
  logger.debug(options);
  var cli = new _eslint2.default.CLIEngine(cliOptions);

  function lintFile(path) {
    logger.debug('lintFile: %s', path);
    var report = cli.executeOnFiles(path);
    if (options.fix) {
      _eslint2.default.CLIEngine.outputFixes(report);
    }
    var results = _settings2.default.cliOptions.quiet ? filterWarnings(report.results) : report.results;
    logger.log((0, _simpleDetail2.default)(results));
  }

  function isWatchableExtension(filePath, extensions) {
    logger.debug(filePath, extensions);
    if (extensions) {
      return _lodash2.default.includes(extensions, _path2.default.extname(filePath));
    }

    // Use the ESLint default extension, if none is provided
    return _lodash2.default.includes(cli.options.extensions, _path2.default.extname(filePath));
  }
  var watchDir = options._.length ? options._ : [_path2.default.resolve('./')];

  _chokidar2.default.watch(watchDir, chokidarOptions).on(events.change, function changeEvent(path) {
    logger.debug('Changed:', path);
    if (!cli.isPathIgnored(path) && isWatchableExtension(path, options.ext)) {
      var watchPath = options.changed ? [path] : watchDir;
      lintFile(watchPath);
    }
  }).on('error', logger.error);

  logger.debug('Watching: %o', watchDir);
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93YXRjaGVyLmpzIl0sIm5hbWVzIjpbIndhdGNoZXIiLCJsb2dnZXIiLCJkZWJ1ZyIsImV2ZW50cyIsImNoYW5nZSIsImNob2tpZGFyT3B0aW9ucyIsImlnbm9yZWQiLCJjbGlPcHRpb25Qcm9wZXJ0aWVzIiwiY2xpT3B0aW9uTWFwIiwiY29uZmlnIiwiZXNsaW50cmMiLCJleHQiLCJjYWNoZUZpbGUiLCJmaWx0ZXJXYXJuaW5ncyIsInJlc3VsdHMiLCJyZWR1Y2UiLCJjdXJyIiwicmVzdWx0Iiwid2FybmluZ0NvdW50IiwibmV3UmVzdWx0Iiwib21pdCIsIm1lc3NhZ2VzIiwiZmluZCIsIm0iLCJzZXZlcml0eSIsInB1c2giLCJvcHRpb25zIiwiY2xpT3B0aW9ucyIsInBpY2siLCJ2YWx1ZSIsImtleSIsImNsaSIsIkNMSUVuZ2luZSIsImxpbnRGaWxlIiwicGF0aCIsInJlcG9ydCIsImV4ZWN1dGVPbkZpbGVzIiwiZml4Iiwib3V0cHV0Rml4ZXMiLCJxdWlldCIsImxvZyIsImlzV2F0Y2hhYmxlRXh0ZW5zaW9uIiwiZmlsZVBhdGgiLCJleHRlbnNpb25zIiwiaW5jbHVkZXMiLCJleHRuYW1lIiwid2F0Y2hEaXIiLCJfIiwibGVuZ3RoIiwicmVzb2x2ZSIsIndhdGNoIiwib24iLCJjaGFuZ2VFdmVudCIsImlzUGF0aElnbm9yZWQiLCJ3YXRjaFBhdGgiLCJjaGFuZ2VkIiwiZXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQTZDd0JBLE87O0FBN0N4Qjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTUMsU0FBUyxzQkFBTyxTQUFQLENBQWY7O0FBRUFBLE9BQU9DLEtBQVAsQ0FBYSxRQUFiOztBQUVBLElBQU1DLFNBQVMsRUFBRUMsUUFBUSxRQUFWLEVBQWY7QUFDQSxJQUFNQyxrQkFBa0I7QUFDdEJDLFdBQVM7QUFEYSxDQUF4QjtBQUdBLElBQU1DLHNCQUFzQixDQUMxQixRQUQw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QUFmLEVBQXlCekMsZUFBekIsRUFDRzhDLEVBREgsQ0FDTWhELE9BQU9DLE1BRGIsRUFDcUIsU0FBU2dELFdBQVQsQ0FBcUJsQixJQUFyQixFQUEyQjtBQUM1Q2pDLFdBQU9DLEtBQVAsQ0FBYSxVQUFiLEVBQXlCZ0MsSUFBekI7QUFDQSxRQUFJLENBQUNILElBQUlzQixhQUFKLENBQWtCbkIsSUFBbEIsQ0FBRCxJQUE0Qk8scUJBQXFCUCxJQUFyQixFQUEyQlIsUUFBUWYsR0FBbkMsQ0FBaEMsRUFBeUU7QUFDdkUsVUFBTTJDLFlBQVk1QixRQUFRNkIsT0FBUixHQUFrQixDQUFDckIsSUFBRCxDQUFsQixHQUEyQlksUUFBN0M7QUFDQWIsZUFBU3FCLFNBQVQ7QUFDRDtBQUNGLEdBUEgsRUFPS0gsRUFQTCxDQU9RLE9BUFIsRUFPaUJsRCxPQUFPdUQsS0FQeEI7O0FBU0F2RCxTQUFPQyxLQUFQLENBQWEsY0FBYixFQUE2QjRDLFFBQTdCO0FBQ0QiLCJmaWxlIjoid2F0Y2hlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaG9raWRhciBmcm9tICdjaG9raWRhcic7XG5pbXBvcnQgZXNsaW50IGZyb20gJ2VzbGludCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCBzZXR0aW5ncyBmcm9tICcuL3NldHRpbmdzJztcbmltcG9ydCBmb3JtYXR0ZXIgZnJvbSAnLi9mb3JtYXR0ZXJzL3NpbXBsZS1kZXRhaWwnO1xuaW1wb3J0IExvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5cbmNvbnN0IGxvZ2dlciA9IExvZ2dlcignd2F0Y2hlcicpO1xuXG5sb2dnZXIuZGVidWcoJ0xvYWRlZCcpO1xuXG5jb25zdCBldmVudHMgPSB7IGNoYW5nZTogJ2NoYW5nZScgfTtcbmNvbnN0IGNob2tpZGFyT3B0aW9ucyA9IHtcbiAgaWdub3JlZDogL1xcLmdpdHxub2RlX21vZHVsZXN8Ym93ZXJfY29tcG9uZW50cy9cbn07XG5jb25zdCBjbGlPcHRpb25Qcm9wZXJ0aWVzID0gW1xuICAnY29uZmlnJywgJ2VzbGludHJjJywgJ2V4dCcsXG4gICdwYXJzZXInLCAnY2FjaGUnLCAnY2FjaGVMb2NhdGlvbicsXG4gICdpZ25vcmUnLCAnaWdub3JlUGF0aCcsICdpZ25vcmVQYXR0ZXJuJyxcbiAgJ2ZpeCcsICdwYXJzZXJPcHRpb25zJywgJ2dsb2JhbCdcbl07XG5jb25zdCBjbGlPcHRpb25NYXAgPSB7XG4gIGNvbmZpZzogJ2NvbmZpZ0ZpbGUnLFxuICBlc2xpbnRyYzogJ3VzZUVzbGludHJjJyxcbiAgZXh0OiAnZXh0ZW5zaW9ucycsXG4gIGNhY2hlRmlsZTogJ2NhY2hlTG9jYXRpb24nXG59O1xuXG5mdW5jdGlvbiBmaWx0ZXJXYXJuaW5ncyhyZXN1bHRzKXtcbiAgcmV0dXJuIF8ucmVkdWNlKHJlc3VsdHMsIChjdXJyLCByZXN1bHQpID0+e1xuICAgIGlmKHJlc3VsdC53YXJuaW5nQ291bnQpe1xuICAgICAgbGV0IG5ld1Jlc3VsdCA9IF8ub21pdChyZXN1bHQsICdtZXNzYWdlcycpO1xuICAgICAgbmV3UmVzdWx0Lm1lc3NhZ2VzID0gXy5maW5kKHJlc3VsdC5tZXNzYWdlcywgKG0pID0+IG0uc2V2ZXJpdHkgPiAxKTtcbiAgICAgIGN1cnIucHVzaChuZXdSZXN1bHQpO1xuICAgICAgcmV0dXJuIGN1cnI7XG4gICAgfVxuICAgIGN1cnIucHVzaChyZXN1bHQpO1xuICAgIHJldHVybiBjdXJyO1xuICB9LCBbXSk7XG59XG5cbi8vL2h0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2Jsb2IvMjMzNDQwZTUyNGFhNDE1NDViNjZiMmMzYzdjYTI2ZmU3OTBlMzJlMC90ZXN0cy9saWIvY2xpLWVuZ2luZS5qcyNMMTA1LUwxMDdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2F0Y2hlcihvcHRpb25zKSB7XG4gIGxldCBjbGlPcHRpb25zID0gXyhvcHRpb25zKVxuICAgIC5waWNrKGNsaU9wdGlvblByb3BlcnRpZXMpXG4gICAgLnJlZHVjZShmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpe1xuICAgICAga2V5ID0gY2xpT3B0aW9uTWFwW2tleV0gfHwga2V5O1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwge30pO1xuICBsb2dnZXIuZGVidWcoY2xpT3B0aW9ucyk7XG4gIGxvZ2dlci5kZWJ1ZyhvcHRpb25zKTtcbiAgbGV0IGNsaSA9IG5ldyBlc2xpbnQuQ0xJRW5naW5lKGNsaU9wdGlvbnMpO1xuXG4gIGZ1bmN0aW9uIGxpbnRGaWxlKHBhdGgpIHtcbiAgICBsb2dnZXIuZGVidWcoJ2xpbnRGaWxlOiAlcycsIHBhdGgpO1xuICAgIGxldCByZXBvcnQgPSBjbGkuZXhlY3V0ZU9uRmlsZXMocGF0aCk7XG4gICAgaWYgKG9wdGlvbnMuZml4KSB7XG4gICAgICBlc2xpbnQuQ0xJRW5naW5lLm91dHB1dEZpeGVzKHJlcG9ydCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdHMgPSBzZXR0aW5ncy5jbGlPcHRpb25zLnF1aWV0ID8gZmlsdGVyV2FybmluZ3MocmVwb3J0LnJlc3VsdHMpIDogcmVwb3J0LnJlc3VsdHM7XG4gICAgbG9nZ2VyLmxvZyhmb3JtYXR0ZXIocmVzdWx0cykpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNXYXRjaGFibGVFeHRlbnNpb24oZmlsZVBhdGgsIGV4dGVuc2lvbnMpIHtcbiAgICBsb2dnZXIuZGVidWcoZmlsZVBhdGgsIGV4dGVuc2lvbnMpO1xuICAgIGlmIChleHRlbnNpb25zKSB7XG4gICAgICByZXR1cm4gXy5pbmNsdWRlcyhleHRlbnNpb25zLCBwYXRoLmV4dG5hbWUoZmlsZVBhdGgpKTtcbiAgICB9XG5cbiAgICAvLyBVc2UgdGhlIEVTTGludCBkZWZhdWx0IGV4dGVuc2lvbiwgaWYgbm9uZSBpcyBwcm92aWRlZFxuICAgIHJldHVybiBfLmluY2x1ZGVzKGNsaS5vcHRpb25zLmV4dGVuc2lvbnMsIHBhdGguZXh0bmFtZShmaWxlUGF0aCkpO1xuICB9XG4gIGxldCB3YXRjaERpciA9IG9wdGlvbnMuXy5sZW5ndGggPyBvcHRpb25zLl8gOiBbcGF0aC5yZXNvbHZlKCcuLycpXTtcblxuICBjaG9raWRhci53YXRjaCh3YXRjaERpciwgY2hva2lkYXJPcHRpb25zKVxuICAgIC5vbihldmVudHMuY2hhbmdlLCBmdW5jdGlvbiBjaGFuZ2VFdmVudChwYXRoKSB7XG4gICAgICBsb2dnZXIuZGVidWcoJ0NoYW5nZWQ6JywgcGF0aCk7XG4gICAgICBpZiAoIWNsaS5pc1BhdGhJZ25vcmVkKHBhdGgpICYmIGlzV2F0Y2hhYmxlRXh0ZW5zaW9uKHBhdGgsIG9wdGlvbnMuZXh0KSkge1xuICAgICAgICBjb25zdCB3YXRjaFBhdGggPSBvcHRpb25zLmNoYW5nZWQgPyBbcGF0aF0gOiB3YXRjaERpcjtcbiAgICAgICAgbGludEZpbGUod2F0Y2hQYXRoKTtcbiAgICAgIH1cbiAgICB9KS5vbignZXJyb3InLCBsb2dnZXIuZXJyb3IpO1xuXG4gIGxvZ2dlci5kZWJ1ZygnV2F0Y2hpbmc6ICVvJywgd2F0Y2hEaXIpO1xufTtcbiJdfQ==